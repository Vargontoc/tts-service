#############################################
# Example .env for TTS Service
# Copy to .env and adjust values.
# Detailed feature config is in models/tts_config.json
#############################################

APP_NAME=TTS Service
API_VERSION=v0

HOST=0.0.0.0
PORT=8000

# OBLIGATORIO: Generar una clave fuerte para producción
# Ejemplo: openssl rand -hex 32
API_KEY=CHANGE_ME_GENERATE_SECURE_KEY_32_CHARS_MIN

# Accepts JSON array or CSV list. Empty => allow all (dev only)
#CORS_ORIGINS_RAW=["http://localhost:3000","http://localhost:5173"]

# Optional overrides (uncomment if needed)
#ENABLE_FALLBACK=true
#COQUI_USE_GPU=auto
#TTS_NORMALIZE_NUMBERS=true
#ENABLE_PROSODY_CONTROL=true

#############################################
# CONFIGURACIÓN DE CACHE
#############################################

# Directorio donde almacenar archivos de cache (relativo al proyecto)
#CACHE_DIR=cache

# Habilitar/deshabilitar el sistema de cache
#CACHE_ENABLED=true

# Tamaño máximo del cache en MB (0 = ilimitado)
# Cuando se supera, se eliminan archivos más antiguos automáticamente
#CACHE_MAX_SIZE_MB=1000

#############################################
# CONFIGURACIÓN DE LOGGING
#############################################

# Nivel de logging: DEBUG, INFO, WARNING, ERROR, CRITICAL
#LOG_LEVEL=INFO

# Archivo de log (None = solo console, descomenta para habilitar)
#LOG_FILE=tts-service.log

# Directorio para archivos de log
#LOG_DIR=logs

# Habilitar logging estructurado JSON para análisis
#LOG_STRUCTURED=true

# Tamaño máximo de archivo de log antes de rotación (bytes)
#LOG_MAX_BYTES=10485760

# Número de archivos de backup a mantener
#LOG_BACKUP_COUNT=5

# No EMOTION_PRESETS here (migration to tts_config.json)

#############################################
# INFORMACIÓN SOBRE DEPENDENCIAS
#############################################
#
# El servicio TTS utiliza diferentes niveles de dependencias:
#
# REQUERIDAS (el servicio no arranca sin ellas):
# - pydub: Conversión de formatos de audio
#
# RECOMENDADAS (funcionalidad limitada sin ellas):
# - TTS (Coqui TTS): Motor TTS de alta calidad
# - torch: Soporte GPU para Coqui TTS
# - librosa: Resampling y manipulación de audio
# - soundfile: I/O de archivos de audio
# - numpy: Operaciones de array en audio
#
# OPCIONALES (mejoras adicionales):
# - python-json-logger: Logging estructurado JSON
#
# El sistema validará automáticamente las dependencias al arrancar
# y mostrará warnings para dependencias faltantes.
#
# Para funcionalidad completa, instalar:
# pip install TTS torch librosa soundfile numpy python-json-logger